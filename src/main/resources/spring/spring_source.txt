Spring bean的存储方式有：

key：   String ，   value ： Object；
key:   Class  ,    value:   Object；
key:   String ,    value :  ObjectFactory;
key:   String ,    value:   BeanDefinition;


xml加 --> xml解析 --> 封装BeanDefinition --> 实例化 --> 存入容器 --> 从容器取出（三级缓存）

ObjectFactory
BeanDefinition

SAX xml解析 ->  BeanDefinitionReader --> BeanDefinition  ----------------->实例化

反射：  Class.forName(“全局限定名”)；
		对象.getClass();
		类名.class;
		Constructor ctor = clazz.getConstructor();
		ctor.newInstance();

BeanFactory;
DefaultListableBeanFactory;

后缀处理器
BeanFactoryPostProcessor   增强BeanDefinition信息
BeanPostProcessor           增强Bean信息


AbstractAutoProxyCreator


实例化：开辟内存空间；设置属性的默认值；
初始化：给属性设置值； 填充属性；执行初始化方法；

填充属性：调用set方法填充属性值； populate；

设置Aware接口的属性：
BeanNameAware;


AbstractApplicationContext;  refresh();


Aware 设置好后；
-->  BeanPostProcessor:before
BeanPostProcessor: 执行 init-method 方法
-->  BeanPostProcessor:after

完整对象  --->context.getBean();

ProxyFactory;
AopProxy;

和Aware接口相关：
AbstractAutowireCapableBeanFactory
invokeAwareMethods

普通对象；容器对象；

BeanFactory接口：

<p>Bean factory implementations should support the standard bean lifecycle interfaces
 * as far as possible. The full set of initialization methods and their standard order is:
 * <ol>
 * <li>BeanNameAware's {@code setBeanName}
 * <li>BeanClassLoaderAware's {@code setBeanClassLoader}
 * <li>BeanFactoryAware's {@code setBeanFactory}
 * <li>EnvironmentAware's {@code setEnvironment}
 * <li>EmbeddedValueResolverAware's {@code setEmbeddedValueResolver}
 * <li>ResourceLoaderAware's {@code setResourceLoader}
 * (only applicable when running in an application context)
 * <li>ApplicationEventPublisherAware's {@code setApplicationEventPublisher}
 * (only applicable when running in an application context)
 * <li>MessageSourceAware's {@code setMessageSource}
 * (only applicable when running in an application context)
 * <li>ApplicationContextAware's {@code setApplicationContext}
 * (only applicable when running in an application context)
 * <li>ServletContextAware's {@code setServletContext}
 * (only applicable when running in a web application context)
 * <li>{@code postProcessBeforeInitialization} methods of BeanPostProcessors
 * <li>InitializingBean's {@code afterPropertiesSet}
 * <li>a custom init-method definition
 * <li>{@code postProcessAfterInitialization} methods of BeanPostProcessors
 * </ol>
 *
 * <p>On shutdown of a bean factory, the following lifecycle methods apply:
 * <ol>
 * <li>{@code postProcessBeforeDestruction} methods of DestructionAwareBeanPostProcessors
 * <li>DisposableBean's {@code destroy}
 * <li>a custom destroy-method definition
 * </ol>



















































